version: "3.8"

######################
# Profiles
#
# docker compose --profile [profile name(s)] up
#
# Profiles:
# ----------------------------------------------------------------
# name            contains
# ----------------------------------------------------------------
# no profile = base start = readsb, dump978, tar1090
# 
# feeders-basic   multifeeder, piaware, planewatch
# feeders         multifeeder, piaware, fr24, abdsx, pfclient,
#                 rbfeeder, radarvirtuel, planewatch, adsbhub
# mlat            mlathub 
# extras          planefence, screenshot, webproxy
# health          vnstat, autoheal, watchtower,
# influx          influxdb, grafana
# acars           airband, acarsdec, dumpvdl2, acars_router, acarshub
#
#
# most current usage:
# docker compose --profile feeders-basic --profile mlat --profile health up -d
# docker compose --profile feeders --profile mlat --profile health up -d
#

networks:
  default:
    name: ${NETWORK_NAME}

services:
  #######################################################################
  # ADS-B/UAT Data Processing Services. These containers read data from
  # dongles and/or other containers and decode or process this data.
  #
  # Containers include:
  # readsb
  # dump978
  # mlathub

  readsb:
    # readsb retrieves 1090MHz Mode A/C/S  data from the SDR(s)
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf
    tty: true
    container_name: readsb
    hostname: readsb
    restart: always
    labels:
      - "autoheal=true"
    devices:
      - /dev/bus/usb
    ports:
      - 8080:8080
      - 30002:30002
      - 30003:30003
      - 30005:30005
    environment:
      - TZ=${FEEDER_TZ}
      - READSB_DEVICE_TYPE=rtlsdr
      - READSB_RTLSDR_DEVICE=${ADSB_DONGLE_SERIAL}
      - READSB_RTLSDR_PPM=${ADSB_DONGLE_PPM}
      - READSB_GAIN=${ADSB_DONGLE_GAIN}
      - READSB_DCFILTER=true
      - READSB_FIX=true
      - READSB_LAT=${FEEDER_LAT}
      - READSB_LON=${FEEDER_LONG}
      - READSB_RX_LOCATION_ACCURACY=2
      - READSB_MODEAC=true
      - READSB_STATS_RANGE=true
      - READSB_NET_ENABLE=true
      - READSB_NET_SBS_OUTPUT_PORT=30003
      - READSB_NET_BEAST_OUTPUT_PORT=30005
      - READSB_NET_RAW_OUTPUT_PORT=30002
      - READSB_NET_CONNECTOR=dump978,37981,raw_in;piaware,30105,beast_in;planewatch,30105,beast_in;multifeeder,39000,beast_in;multifeeder,39001,beast_in;multifeeder,39002,beast_in
      - READSB_NET_BEAST_REDUCE_OUT_PORT=30105
      - READSB_GRAPH_MAX_MESSAGES_LINE=1
      - READSB_GRAPH_ALL_LARGE=yes
      - READSB_EXTRA_ARGS=api-port,8080
      # - INFLUXDB_URL=${INFLUXDB_URL}
      # - INFLUXDB_USERNAME=${INFLUXDB_USERNAME}
      # - INFLUXDB_PASSWORD=${INFLUXDB_PASSWORD}
      # - INFLUXDB_V2_BUCKET=${INFLUXDB_V2_BUCKET}
      # - INFLUXDB_V2_ORG=${INFLUXDB_V2_ORG}
    volumes:
      - /opt/adsb/readsb/collectd:/run/collectd
      - /opt/adsb/readsb/autogain:/run/autogain
    tmpfs:
      - /run/readsb
      - /var/log


  dump978:
    # dump978 gets UAT data from the SDR
    image: ghcr.io/sdr-enthusiasts/docker-dump978
    tty: true
    container_name: dump978
    hostname: dump978
    restart: always
    labels:
      - "autoheal=true"
    devices:
      - /dev/bus/usb
    environment:
      - TZ=${FEEDER_TZ}
      - READSB_RTLSDR_DEVICE=${ADSB_DONGLE_SERIAL}
      - READSB_RTLSDR_PPM=${ADSB_DONGLE_PPM}
      - READSB_GAIN=${ADSB_DONGLE_GAIN}
      - DUMP978_RTLSDR_DEVICE=${UAT_DONGLE_SERIAL}
      - DUMP978_SDR_GAIN=${UAT_DONGLE_GAIN}
      - DUMP978_SDR_PPM=${UAT_DONGLE_PPM}
      - AUTOGAIN_INITIAL_PERIOD=7200
    volumes:
      - /opt/adsb/dump978/autogain:/run/autogain
    tmpfs:
      - /run/readsb


  mlathub:
    # mlathub aggregates the MLAT results from various containers
    # and makes this available to the visualization programs for display.
    image: ghcr.io/sdr-enthusiasts/docker-readsb-protobuf
    profiles:
      - mlat
    tty: true
    container_name: mlathub
    hostname: mlathub
    restart: always
    labels:
      - "autoheal=true"
    ports:
      - 30105:30105
    environment:
      - TZ=${FEEDER_TZ}
      - DISABLE_PERFORMANCE_GRAPHS=true
      - DISABLE_WEBAPP=true
      - READSB_NET_ENABLE=true
      - READSB_NET_CONNECTOR=piaware,30105,beast_in;rbfeeder,30105,beast_in;radarvirtuel,30105,beast_in;planewatch,30105,beast_in;multifeeder,39000,beast_in;multifeeder,39001,beast_in;multifeeder,39002,beast_in
      - UUID=00000000-0000-0000-0000-000000000000
      - MLAT_CONFIG=feed.adsb.fi,31090,39000;feed.adsb.one,64006,39001;in.adsb.lol,31090,39002;
      - READSB_NET_ONLY=true
      - READSB_FORWARD_MLAT=true
      - READSB_NET_BEAST_OUTPUT_PORT=30105
    tmpfs:
      - /run/readsb


  ######################################################################################
  # ADS-B Feeder Services. These containers feed ADS-B/UAT data to aggregator services.
  # Containers include:
  # 
  # Site:               Container:    Profile:
  # --------------------------------------------------------
  # ADSB Hub            adsbhub       feeders
  # FlightAware         piaware       feeders, feeders-basic
  # FlightRadar24       fr24          feeders
  # Planefinder         pfclient      feeders
  # Plane.Watch         planewatch    feeders, feeders-basic
  # RadarBox            rbfeeder      feeders
  # RadarVirtuel        radarvirtuel  feeders
  # "New" aggregators   multifeeder   feeders, feeders-basic
  #   (e.g. adsb.*)

  adsbhub:
  # adsbhub feeds ADS-B and UAT data (from readsb) to ADSB Hub.
    image: ghcr.io/sdr-enthusiasts/docker-adsbhub
    profiles:
      - feeders
    tty: true
    container_name: adsbhub
    restart: always
    labels:
      - "autoheal=true"
    environment:
      - TZ=${FEEDER_TZ}
      - SBSHOST=readsb
      #- CLIENTKEY=${ADSBHUB_STATION_KEY}


  piaware:
  # piaware feeds ADS-B and UAT data (from readsb) to FlightAware.
  # It also includes a GUI Radar website and a status website
    image: ghcr.io/sdr-enthusiasts/docker-piaware
    profiles:
      - feeders
      - feeders-basic
    tty: true
    container_name: piaware
    hostname: piaware
    restart: always
    labels:
      - "autoheal=true"
    ports:
      - 8081:8080
      - 8088:80
    environment:
      - BEASTHOST=readsb
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - TZ=${FEEDER_TZ}
      - FEEDER_ID=${PIAWARE_FEEDER_ID}
      - UAT_RECEIVER_TYPE=relay
      - UAT_RECEIVER_HOST=dump978
    tmpfs:
      - /run:exec,size=64M
      - /var/log

  fr24:
  # fr24 feeds ADS-B and UAT data (from readsb) to FlightRadar24.
  # It also includes a status website. Please be careful
    # not to expose the status website to the internet as users may be able to start/stop/change the service from there.
    # Also note that FR24 has requested NOT to enable MLAT for those station that feed to multiple services; as such, it's commented out.
    image: ghcr.io/sdr-enthusiasts/docker-flightradar24
    profiles:
      - feeders
    tty: true
    container_name: fr24
    hostname: fr24
    restart: always
    labels:
      - "autoheal=true"
    ports:
      - 8754:8754
    environment:
      - BEASTHOST=readsb
      - TZ=${FEEDER_TZ}
      - FR24KEY=${FR24_SHARING_KEY}
    #      - MLAT=yes
    tmpfs:
      - /var/log

  pfclient:
  # pfclient feeds ADS-B and UAT data (from readsb) to Plane Finder.
  # It also includes a GUI Radar website and a status website  
    image: ghcr.io/sdr-enthusiasts/docker-planefinder:latest
    profiles:
      - feeders
    tty: true
    container_name: pfclient
    restart: always
    labels:
      - "autoheal=true"
    ports:
      - 8084:30053
    environment:
      - BEASTHOST=readsb
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - TZ=${FEEDER_TZ}
      - SHARECODE=${PLANEFINDER_SHARECODE}

  planewatch:
  # planewatch feeds ADS-B and UAT data (from readsb) to Plane.Watch.
    image: planewatch/plane-watch
    profiles:
      - feeders
      - feeders-basic
    tty: true
    container_name: planewatch
    hostname: planewatch
    restart: always
    labels:
      - "autoheal=true"
    environment:
      - BEASTHOST=readsb
      - TZ=${FEEDER_TZ}
      - API_KEY=${PLANEWATCH_KEY}
      #- ACARS_HOST=acars_router
      #- VDLM2_HOST=acars_router
      - DEBUG_LOGGING=true
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_FT}ft
    tmpfs:
      - /run:exec,size=64M
      - /var/log

  rbfeeder:
  # rbfeeder feeds ADS-B and UAT data (from readsb) to RadarBox.
    image: ghcr.io/sdr-enthusiasts/docker-radarbox
    profiles:
      - feeders
    tty: true
    container_name: rbfeeder
    hostname: rbfeeder
    restart: always
    labels:
      - "autoheal=true"
    environment:
      - BEASTHOST=readsb
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_M}
      - TZ=${FEEDER_TZ}
      - SHARING_KEY=${RADARBOX_SHARING_KEY}
    tmpfs:
      - /run:exec,size=64M
      - /var/log

  radarvirtuel:
  # radarvirtuel feeds ADS-B and UAT data (from readsb) to RadarVirtuel.
    image: ghcr.io/sdr-enthusiasts/docker-radarvirtuel
    profiles:
      - feeders
    tty: true
    container_name: radarvirtuel
    hostname: radarvirtuel
    restart: always
    labels:
      - "autoheal=true"
    environment:
      - FEEDER_KEY=${RV_KEY}
      - SOURCE_HOST=tar1090:30002
      - RV_SERVER=mg22.adsbnetwork.com:50050
      - LAT=${FEEDER_LAT}
      - LON=${FEEDER_LONG}
      - ALT=${FEEDER_ALT_M}m
      - MLAT_SERVER=mlat.adsbnetwork.com:50000
      - MLAT_HOST=readsb:30005
      - MLAT_INPUT_TYPE=auto
      - VERBOSE=ON
    tmpfs:
      - /tmp:rw,nosuid,nodev,noexec,relatime,size=128M
    volumes:
      - "/etc/localtime:/etc/localtime:ro"
      - "/etc/timezone:/etc/timezone:ro"

  multifeeder:
  # Multifeeder (adsb.fi,adsb.lol,adsb.one and any other of the "new" aggregators)
    image: ghcr.io/sdr-enthusiasts/docker-multifeeder
    profiles:
      - feeders
      - feeders-basic
    tty: true
    container_name: multifeeder
    hostname: multifeeder
    restart: always
    labels:
      - "autoheal=true"
    environment:
      - TZ=${FEEDER_TZ}
      - READSB_NET_CONNECTOR=readsb,30005,beast_in;feed.adsb.fi,30004,beast_reduce_plus_out;feed.adsb.one,64004,beast_reduce_plus_out;feed.theairtraffic.com,30004,beast_reduce_plus_out;
      - MLAT_CONFIG=feed.adsb.fi,31090,39000;feed.adsb.one,64006,39001;feed.theairtraffic.com,31090,39002
      - MLAT_USER=${MLAT_SITE_NAME}
      - MLAT_CONFIG=feed.adsb.fi,31090,39000;feed.adsb.one,64006,39001;in.adsb.lol,31090,39002
      - READSB_LAT=${FEEDER_LAT}
      - READSB_LON=${FEEDER_LONG}
      - READSB_ALT=${FEEDER_ALT_M}m
    tmpfs:
      - /run/readsb
      - /var/log


  ######################################################################################
  # ADS-B Visualization Services. These containers create pretty web pages from ADSB/UAT
  # data that your station receives.
  # 
  # Containers include:
  # tar1090 (most people's preferred "radar" application
  # planefence (monitor planes nearby your station and planes from a "special" watchlist)
  # screenshot (auxilary container used with planefence -- only runs well on Pi4)


  tar1090:
    image: ghcr.io/sdr-enthusiasts/docker-tar1090
    tty: true
    container_name: tar1090
    hostname: tar1090
    restart: always
    labels:
      - "autoheal=true"
    environment:
      - UPDATE_TAR1090=true
      - TZ=${FEEDER_TZ}
      - BEASTHOST=readsb
      - LAT=${FEEDER_LAT}
      - LONG=${FEEDER_LONG}
      - TAR1090_DEFAULTCENTERLAT=${FEEDER_LAT}
      - TAR1090_DEFAULTCENTERLON=${FEEDER_LONG}
      - TAR1090_SITESHOW=false
      - HEYWHATSTHAT_PANORAMA_ID=${HEYWHATSTHAT_ID}
      - HEYWHATSTHAT_ALTS=${HEYWHATSTHAT_ALTS}
      - ENABLE_TIMELAPSE1090=false
      - ENABLE_UAT=yes
      # Need to add URL. Doesn't need data/aircraft.json
      - MLATHOST=mlathub
      - TAR1090_ENABLE_AC_DB=true
      - TAR1090_FLIGHTAWARELINKS=true
      - TAR1090_DISPLAYUNITS=${TAR1090_DISPLAYUNITS}
      - TAR1090_RANGE_OUTLINE_COLORED_BY_ALTITUDE=${TAR1090_RANGE_OUTLINE_COLORED_BY_ALTITUDE}
      - TAR1090_RANGE_OUTLINE_WIDTH=${TAR1090_RANGE_OUTLINE_WIDTH}
      - TAR1090_MAPDIM=${TAR1090_MAPDIM}
      - TAR1090_RANGERINGS=${TAR1090_RANGERINGS}
      - TAR1090_RANGERINGSDISTANCES=${TAR1090_RANGERINGSDISTANCES}
      - TAR1090_RANGERINGSCOLORS=${TAR1090_RANGERINGSCOLORS}
    ports:
      - 8082:80
    volumes:
      - "/opt/adsb/tar1090/heatmap:/var/globe_history"
      - "/opt/adsb/tar1090/timelapse:/var/timelapse1090"
      - "/opt/adsb/tar1090/graphs1090:/var/lib/collectd"
    tmpfs:
      - /run:exec,size=64M
      - /var/log

  planefence:
  # Note - after initial startup, please edit /opt/adsb/planefence/config/planefence.config.
  # Then restart this container.
    image: kx1t/planefence:dev
    profiles:
      - extras
    tty: true
    container_name: planefence
    hostname: planefence
    restart: always
    labels:
      - "autoheal=true"
    depends_on:
      - tar1090
    ports:
      - 8083:80
    environment:
      - TZ=${FEEDER_TZ}
      - PF_ALERTLIST=${PF_ALERTLIST}
    volumes:
      - /opt/adsb/planefence/config:/usr/share/planefence/persist
      - /opt/adsb/planefence/html:/usr/share/planefence/html
    tmpfs:
      - /run:rw,nosuid,nodev,exec,relatime,size=256M
      - /tmp:rw,nosuid,nodev,noexec,relatime,size=128M


  screenshot:
    image: tedder42/browser-screenshot-service
    profiles:
      - extras
    tty: true
    container_name: screenshot
    hostname: screenshot
    depends_on:
      - planefence
    restart: always
    labels:
      - "autoheal=true"
    shm_size: 1gb
    environment:
      - MAP_ARGS=zoom=8.5&hideSidebar&hideButtons&mapDim=0.2&monochromeMarkers=ff0000&outlineColor=505050&iconScale=1.5&enableLabels&extendedLabels=2&trackLabels
      - LOAD_SLEEP_TIME=25
      - BASE_URL=http://tar1090
      - DISABLE_SHM=true
      - MAXTIME=60
    ports:
      - 5042:5042

 
#####################################################################################
# Additional aircraft related containers: airband
# This container allows listening to Airband radio and feeding this data to RadarBox.
# It also creates a local Icecast station you can listen to.

  airband:
    image: fredclausen/rtlsdrairband
    profiles:
      - acars
    tty: true
    container_name: airband
    restart: always
    labels:
      - "autoheal=true"
    # depends_on:
    #   - rbfeeder
    devices:
      - /dev/bus/usb:/dev/bus/usb
    ports:
      - 8000:8000
    environment:
      - RTLSDRAIRBAND_CUSTOMCONFIG=true
#      - ICECAST_CUSTOMCONFIG=true
    volumes:
      - /opt/adsb/rtlsdr-airband:/run/rtlsdr-airband 


##############################################################################################################
# Additional aircraft related containers: ACARS/VDLM
# With these containers, you can receive and look at ACARS and VDL-M2 messages and feed those to airframes.io.
# Note that the plane.watch container is also set up to forward these messages.
# The set consists of the following containers:
#   acarsdec: receives and decodes ACARS data from a dedicated RTL-SDR dongle
#   dumpvdl2: receives and decodes VDL-M2 data from a dedicated RTL-SDR dongle
#   acars_router: functions as an aggregator/distributor of the received ACARS and VDL-M2 data
#   acarshub: visualization tool for ACARS and VDL-M2 data

  acarsdec:
    image: ghcr.io/sdr-enthusiasts/docker-acarsdec:latest
    profiles:
      - acars
    tty: true
    container_name: acarsdec
    restart: always
    labels:
      - "autoheal=true"
    devices:
      - /dev/bus/usb:/dev/bus/usb
    environment:
      - TZ=${FEEDER_TZ}
      - SERIAL=${ACARS_DONGLE_SERIAL}
      - FREQUENCIES=${ACARS_FREQUENCIES}
      - GAIN=${ACARS_DONGLE_GAIN}
      - SERVER=acars_router
      - SERVER_PORT=5550
      - FEED_ID=${ACARS_FEEDER_ID}
    tmpfs:
      - /run:exec,size=64M
      - /var/log


  dumpvdl2:
    image: ghcr.io/sdr-enthusiasts/docker-dumpvdl2:latest
    profiles:
      - acars
    tty: true
    container_name: dumpvdl2
    restart: always
    labels:
      - "autoheal=true"
    devices:
      - /dev/bus/usb:/dev/bus/usb
    environment:
      - TZ=${FEEDER_TZ}
      - SERIAL=${VDLM_DONGLE_SERIAL}
      - FREQUENCIES=${VDLM_FREQUENCIES}
      - GAIN=${VDLM_DONGLE_GAIN}
      - ZMQ_MODE=server
      - ZMQ_ENDPOINT=tcp://0.0.0.0:45555
      - FEED_ID=${VDLM_FEEDER_ID}
      - VDLM_FILTER_ENABLE=
      - QUIET_LOGS=FALSE
      - SERVER=
    tmpfs:
      - /run:exec,size=64M
      - /var/log


  acars_router:
    image: ghcr.io/sdr-enthusiasts/acars_router:latest
    profiles:
      - acars
    tty: true
    container_name: acars_router
    restart: always
    labels:
      - "autoheal=true"
    environment:
      - TZ=${FEEDER_TZ}
      - AR_SEND_UDP_ACARS=acarshub:5550;feed.acars.io:5550
      - AR_SEND_UDP_VDLM2=acarshub:5555
      - AR_SEND_TCP_VDLM2=feed.acars.io:5553
      - AR_RECV_ZMQ_VDLM2=dumpvdl2:45555
#      - AR_VERBOSITY=1
    ports:
     - 15550:15550
     - 15555:15555
    tmpfs:
      - /run:exec,size=64M
      - /var/log


  acarshub:
    image: ghcr.io/sdr-enthusiasts/docker-acarshub:latest
    profiles:
      - acars
    tty: true
    container_name: acarshub
    hostname: acarshub
    restart: always
    labels:
      - "autoheal=true"
    ports:
      - 8091:80
    environment:
      - TZ=${FEEDER_TZ}
      - ADSB_LAT=${FEEDER_LAT}
      - ADSB_LON=${FEEDER_LONG}
      - ENABLE_ADSB=true
      - ADSB_URL=http://tar1090/data/aircraft.json
      - ENABLE_ACARS=external
      - ENABLE_VDLM=external
    volumes:
      - /opt/adsb/acars_data:/run/acars
    tmpfs:
      - /run:exec,size=64M
      - /var/log


  ############################################################################################################
  # Finally, a few "maintenance" containers that keep the rest of the stack healthy and up to date:
  # vnstat: shows network usage on a per interface (global and per container) basis
  # autoheal: restarts containers when they are deemed "unhealthy"
  # watchtower: checks every 24 hours for new versions of the containers, and downloads/installs/starts them

  vnstat:
    image: vergoh/vnstat
    profiles:
      - health
    container_name: vnstat
    restart: unless-stopped
    labels:
      - "autoheal=true"
    network_mode: "host"
    ports:
      - 8685:8685
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - /etc/timezone:/etc/timezone:ro
      - /opt/adsb/vnstat:/var/lib/vnstat
    environment:
      - HTTP_PORT=8685
      - HTTP_BIND=*
      - HTTP_LOG=/dev/stdout
      - LARGE_FONTS=1
      - CACHE_TIME=1
      - RATE_UNIT=0
      - PAGE_REFRESH=0
      - SERVER_NAME="ADSB Station IO Stats"


  autoheal:
    image: willfarrell/autoheal
    tty: true
    container_name: autoheal
    hostname: autoheal
    profiles:
      - health
    restart: always
    environment:
      - AUTOHEAL_CONTAINER_LABEL=all
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  watchtower:
    image: containrrr/watchtower
    tty: true
    container_name: watchtower
    hostname: watchtower
    profiles:
      - health
    restart: always
    environment:
      - TZ=${FEEDER_TZ}
      - WATCHTOWER_CLEANUP=true
      - WATCHTOWER_POLL_INTERVAL=86400
      - WATCHTOWER_ROLLING_RESTART=true
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock


  syncthing:
    image: lscr.io/linuxserver/syncthing:latest
    # maybe this? https://github.com/funkyfuture/docker-rpi-syncthing
    container_name: syncthing
    hostname: syncthing
    profiles:
        - backup
    environment:
      - PUID=1000
      - PGID=1000
      - TZ=${FEEDER_TZ}
    volumes:
      - /opt/adsb/syncthing/config:/config
      - /opt/adsb:/adsb
    ports:
      - 8384:8384
      - 22000:22000/tcp
      - 22000:22000/udp
      - 21027:21027/udp
    restart: unless-stopped
